<?xml version="1.0"?><st-source><!-- Name: SuffixConditionalsNotice: The MIT License (MIT)Copyright (c) 2014 Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.Comment: # SuffixConditionalsAdd Ruby-like suffix and Python-like infix conditionals to VisualworksSmalltalk.SuffixConditionals is licensed under the MIT license.  See thecopyright tab in the RB, the `notice` property of this package or the`LICENSE` file on GitHub.SuffixConditionals' primary home is the [Cincom Public Store Repository](http://www.cincomsmalltalk.com/CincomSmalltalkWiki/Public+Store+Repository).Check there for the latest version.  It is also on[GitHub](https://github.com/randycoulman/SuffixConditionals).SuffixConditionals was developed in VW 7.9.1, but is compatible withany version of VisualworksSmalltalk. If you find any incompatibilities,let me know (see below for contact information) or file an issue onGitHub.# IntroductionSuffixConditionals adds `if:`, `unless:`, and `if:else:` methods to`BlockClosure` in Visualworks Smalltalk.When writing a conditional expression with a single branch (i.e.,`ifTrue:` or `ifFalse:`), it is sometimes desirable for the main focusof the expression to be on the action, rather than the condition.  Inthose cases, the action should come first.Likewise, when using the return value of a conditional expression,an infix notation of the condition is easier to read from time to time.SuffixConditionals makes that possible.For example, the following code:```(self respondsTo: methodName)    ifTrue: [^self perform: methodName with: anEvent]```can be written as:```[^self perform: methodName with: anEvent]    if: (self respondsTo: methodName)```Another example:```'Variable n is ' , (n odd ifTrue: ['odd'] ifFalse: ['even'])```could be rewritten as:```'Variable n is ' , (['odd'] if: n odd else: ['even'])```It is up to you to decide which form is more readable in your code,but SuffixConditionals gives you the choice.The methods `#if:`, `#unless:`, and `#if:else` are optimized in thesame way as the standard conditional methods (`#ifTrue:`, `#ifFalse:`,etc), so SuffixConditionals does not impose an additional performancepenalty.  Thanks to Steffen Märcker for implementing thisoptimization.# ContributingI'm happy to receive bug fixes and improvements to this package.  Ifyou'd like to contribute, please publish your changes as a "branch"(non-integer) version in the Public Store Repository and contact me asoutlined below to let me know.  I will consider merging your changesback into the "trunk" as soon as I can review them.# Contact InformationIf you have any questions about SuffixConditionals and how to use it, feelfree to contact me.* Web site: http://randycoulman.com* Blog: Courageous Software (http://randycoulman.com/blog)* E-mail: randy _at_ randycoulman _dot_ com* Twitter: @randycoulman* GitHub: randycoulmanDbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1687DbUsername: randyDbVersion: 4DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' ''))PackageName: SuffixConditionalsParcel: #('SuffixConditionals')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle))PrerequisiteParcels: #(#('Base VisualWorks' ''))PrintStringCache: (4,randy)Version: 4Post-Load Block: 	[:package | MessageNode registerSuffixConditionalMacros]Pre-Unload Block: 	[:package | MessageNode unregisterSuffixConditionalMacros]Date: 7:56:06 AM April 30, 2014 --><time-stamp>From VisualWorks® Personal Use Edition, 7.9.1 of October 18, 2012 on April 30, 2014 at 7:56:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Kernel.MessageNode class</class-id> <category>class initialization</category><body package="SuffixConditionals">registerSuffixConditionalMacros	"Called from the package's postLoad action"	"self registerSuffixConditionalMacros"	MacroSelectors		at: #if:else: put: #transformIfElse;		at: #if: put: #transformIf;		at: #unless: put: #transformUnless</body><body package="SuffixConditionals">unregisterSuffixConditionalMacros	"Called from the package's preUnload action"	"self unregisterSuffixConditionalMacros"	MacroSelectors		removeKey: #if:else: ifAbsent: [];		removeKey: #if: ifAbsent: [];		removeKey: #unless: ifAbsent: []</body></methods><methods><class-id>Kernel.MessageNode</class-id> <category>private</category><body package="SuffixConditionals">make: trueBlock if: condition else: falseBlock	" Similar to #makeIfTrue:ifFalse:."	^ConditionalNode new		sourcePosition: self sourcePosition;		condition: condition		trueBlock: trueBlock		falseBlock: falseBlock		from: self</body></methods><methods><class-id>Kernel.MessageNode</class-id> <category>transforming</category><body package="SuffixConditionals">transformIf	^(self testLiteralBlock: 0 at: 0)		ifTrue: [self make: receiver if: arguments first else: (BlockNode new body: (LiteralNode new value: nil))]		ifFalse: [nil]</body><body package="SuffixConditionals">transformIfElse	^((self testLiteralBlock: 0 at: 0) &amp; (self testLiteralBlock: 0 at: 2))		ifTrue: [self make: receiver if: arguments first else: arguments last]		ifFalse: [nil]</body><body package="SuffixConditionals">transformUnless	^(self testLiteralBlock: 0 at: 0)		ifTrue: [self make: (BlockNode new body: (LiteralNode new value: nil)) if: arguments first else: receiver]		ifFalse: [nil]</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>controlling</category><body package="SuffixConditionals">if: aBoolean	^aBoolean ifTrue: [self value]</body><body package="SuffixConditionals">if: aBoolean else: aBlock	"Expression optimized to take advantage of the compiler's optimization of ifTrue:ifFalse.	Equivalent to: ^aBoolean ifTrue: self ifFalse: aBlock"	^(aBoolean ifTrue: [self] ifFalse: [aBlock]) value</body><body package="SuffixConditionals">unless: aBoolean	^aBoolean ifFalse: [self value]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>MessageNode</name><environment>Kernel</environment><super>Kernel.SimpleMessageNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expanded expansion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Program Objects</category><attributes><package>System-Compiler-Program Objects</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class></st-source>